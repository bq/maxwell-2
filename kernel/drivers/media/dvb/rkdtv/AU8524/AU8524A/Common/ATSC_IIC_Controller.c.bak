/******************************************************************/
/*   Copyright (C) 2007 ROCK-CHIPS FUZHOU . All Rights Reserved.  */
/*******************************************************************


*********************************************************************/
#include<linux/string.h>
#include<linux/types.h>
#include <linux/module.h>

#include "../TSTV.h"

static UINT8 ATSC_I2C_slaveaddr  = 0x00;

static UINT16 ATSC_I2C_oldspeed = 0x0000;

/**************************************************************************
* 函数描述: I2C start
* 入口参数: 无
* 出口参数: 无
* 返回值:   无
***************************************************************************/
void ATSC_I2CStart(void)
{

}

/**************************************************************************
* 函数描述: I2C stop
* 入口参数: 无
* 出口参数: 无
* 返回值:   无
***************************************************************************/
void ATSC_I2CStop(void)
{


}

/**************************************************************************
* 函数描述: 向I2C从设备发送数据
* 入口参数: Data -- 待发送的数据(UINT8)
* 出口参数: 无
* 返回值:   0 -- 发送成功
*           非0 -- 发送失败
***************************************************************************/
BOOL ATSC_I2CSendData(UINT8 Data, BOOL StartBit)
{

}

/**************************************************************************
* 函数描述: 从I2C从设备读取数据
* 入口参数: 无
* 出口参数: 无
* 返回值:   Data -- 读到的数据
***************************************************************************/
BOOL ATSC_I2CReadData(UINT8 *Data)
{

}

/**************************************************************************
* 函数描述: 设置I2C速度
* 入口参数: speed -- I2C速度(以K为单位) eg. speed = 400 即 400K
* 出口参数: 无
* 返回值:   TRUE -- 设置成功
*           FALSE -- 设置失败
***************************************************************************/
BOOL ATSC_I2CSetSpeed(UINT16 speed, UINT32 apbfreq)
{

}

/**************************************************************************
* 函数描述: 初始化I2C模块
* 入口参数: 无
* 出口参数: 无
* 返回值:   TRUE -- 初始化成功
*           FALSE -- 初始化失败
***************************************************************************/
BOOL ATSC_I2C_Init(UINT8 SlaveAddress, UINT16 nKHz)
{


}

BOOL ATSC_I2C_Write8(UINT8 RegAddr, UINT8 *pData, UINT16 size, eI2C_mode_t mode)
{

}
/**************************************************************************
* 函数描述: 向I2C设备写数据
* 入口参数: RegAddr -- I2C设备内寄存器地址
            *pData -- I2C设备内寄存器地址内数据
            size -- 一次I2C写操作的数据大小(单位byte)
            mode -- NormalMode/DirectMode
* 出口参数: 无
* 返回值:   TRUE -- 写成功
*           FALSE -- 写失败
***************************************************************************/
BOOL ATSC_I2C_Write(UINT16 RegAddr, UINT8 *pData, UINT16 size, eI2C_mode_t mode)
{

}

/**************************************************************************
* 函数描述: 向I2C设备写数据,但不发送停止位
* 入口参数: RegAddr -- I2C设备内寄存器地址
            *pData -- I2C设备内寄存器地址内数据
            size -- 一次I2C写操作的数据大小(单位byte)
            mode -- NormalMode/DirectMode
* 出口参数: 无
* 返回值:   TRUE -- 写成功
*           FALSE -- 写失败
***************************************************************************/
BOOL ATSC_I2C_Write_without_stop(UINT16 RegAddr,UINT8 *pData,UINT16 size, eI2C_mode_t mode)
{

}
BOOL ATSC_I2C_Read8(UINT8 RegAddr, UINT8 *pData, UINT16 size, eI2C_mode_t mode)
{

}


/**************************************************************************
* 函数描述: 从I2C设备读数据
* 入口参数: RegAddr -- I2C设备内寄存器地址
            size -- 数据的大小
            mode -- NormalMode/DirectMode
* 出口参数: *pData -- I2C设备内寄存器地址内数据
* 返回值:   TRUE -- 读成功
*           FALSE -- 读失败
***************************************************************************/
BOOL ATSC_I2C_Read(UINT16 RegAddr, UINT8 *pData, UINT16 size, eI2C_mode_t mode)
{

}

/**************************************************************************
* 函数描述: 反初始化I2C模块
* 入口参数: 无
* 出口参数: 无
* 返回值:   TRUE -- 初始化成功
*           FALSE -- 初始化失败
***************************************************************************/
BOOL ATSC_I2C_Deinit(void)
{

}

/**************************************************************************
* 函数描述: 因为I2C的SCL输出频率直接有APB clk分频得到，在APB频率进行调整时
*           需要调用这个函数对I2C内部分频值进行相应的调整，以满足SCL频率稳定
* 入口参数: APBnKHz   APB频率，单位KHz
* 出口参数: 无
* 返回值:   无
***************************************************************************/
void ATSC_I2C_SetFreq(UINT32 APBnKHz)
{

}
